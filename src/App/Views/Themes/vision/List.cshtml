@model ListModel
@inject Core.Services.IDataService _db
@{
    ViewData["bodyClass"] = "home";
    var pgr = Model.Pager;

    var first3 = _db.BlogPosts.All().OrderByDescending(p => p.Published).Take(3).ToList();

    var returnUrl = Url.Action("Index", "Admin");

}
<!DOCTYPE html>
<html lang="en">
<head>
    <partial name="~/Views/Themes/vision/_Shared/_Head.cshtml" />
</head>
<body class="@ViewData["bodyClass"]">

    <partial name="~/Views/Themes/vision/_Shared/_Header.cshtml" />



    <div class="page-content">
        <div class="container">
            <div class="row">
                <aside class="col-sm-3">

                    <div class="widget widget-posts">
                        <h4 class="widget-title"><i class="widget-icon fa fa-file-text-o"></i> <span>Recent Posts</span></h4>
                        <div class="widget-body">
                            <ul class="widget-posts-list">
                                @await Component.InvokeAsync("PostList", new { theme = "vision", widget = "Recent Posts" })
                            </ul>
                        </div>
                    </div>
                    <div class="widget widget-categories">
                        <h4 class="widget-title"><i class="widget-icon fa fa-folder"></i> <span>Categories</span></h4>
                        <div class="widget-body">
                            <ul>
                                @await Component.InvokeAsync("Categories", new { theme = "vision", widget = "Categories" })
                            </ul>
                        </div>
                    </div>
                    <div class="widget widget-tags">
                        <h4 class="widget-title"><i class="widget-icon fa fa-tags"></i> <span>Tags</span></h4>
                        <div class="widget-body">
                            <ul class="clearfix">
                                @await Component.InvokeAsync("Categories", new { theme = "vision", widget = "Tags" })
                            </ul>
                        </div>
                    </div>
                </aside>
                <div class="col-sm-6 pl-5  pr-5">

                    @if (Model.PostListType == PostListType.Search)
                    {
                    <h2 class="page-search-title"><i class="fa fa-search"></i> @Model.Blog.Title</h2>
                    <hr class="my-5" />
                    }
                    else if (Model.PostListType == PostListType.Author)
                    {
                    <h2 class="page-author-title">
                        <img src="~/@Model.Author.Avatar" class="page-author-avatar" />
                        <span class="page-author-name">@Model.Author.DisplayName</span>
                    </h2>
                    <hr class="my-5" />
                    }
                    else if (Model.PostListType == PostListType.Category)
                    {
                    <h2 class="page-category-title"><i class="fa fa-tag"></i> @ViewBag.Category</h2>
                    <hr class="my-5" />
                    }
                    else
                    {

                    }

                    @if (Model.Posts != null)
                    {
                        foreach (var item in Model.Posts)
                        {
                            var img = string.IsNullOrEmpty(item.Cover) ? Model.Blog.Cover : item.Cover;
                    <article class="post">
                        <div class="post-cover">

                            <ul class="post-categories">
                                <li><a href="#">Technology</a></li>
                                <li><a href="#">Microsoft</a></li>
                            </ul>

                            <a href="~/posts/@item.Slug">
                                <img src="~/@img" alt="@item.Title">
                            </a>
                            @if (item.Featured)
                                    {
                            <span class="post-featrued-label"><i class="fa fa-star"></i> Featured</span>
                                    }
                        </div>
                        <h2 class="post-title"><a href="~/posts/@item.Slug">@item.Title</a></h2>
                        <div class="post-meta">
                            @*<a class="post-meta-author" href="~/authors/@item.Author.AppUserName">@item.Author.DisplayName</a>*@
                            <time class="post-meta-time">@item.Published.ToFriendlyDateString()</time>

                        </div>
                        <div class="post-description">@Html.Raw(Markdig.Markdown.ToHtml(item.Description))</div>
                        <a href="~/posts/@item.Slug" class="post-more">Read More</a>
                    </article>
                            }
                            }

                    @if (pgr != null && (pgr.ShowOlder || pgr.ShowNewer))
                    {

                    <hr />
                    <ul class="pagination justify-content-between">
                        @if (pgr.ShowOlder)
                            {
                        <li class="item item-prev">
                            <a class="item-link" href="~/@pgr.LinkToOlder">
                                Previous Page
                            </a>
                        </li>
                            }
                        @if (pgr.ShowNewer)
                            {
                        <li class="item item-next">
                            <a class="item-link" href="~/@pgr.LinkToNewer">
                                Next Page
                            </a>
                        </li>
                            }
                    </ul>
                    }
                </div>

                <aside class="col-sm-3">

                    <div class="widget widget-newsletter">
                        <h4 class="widget-title"><i class="widget-icon fa fa-telegram"></i><span>Newsletter</span></h4>
                        <div class="widget-body">
                                @await Component.InvokeAsync("Newsletter", new { theme = "vision", widget = "Newsletter" })
                        </div>
                    </div>
                    <div class="widget widget-social">
                        <h4 class="widget-title"><i class="widget-icon fa fa-share-alt"></i><span>Follow Us</span></h4>
                        <div class="widget-body">
                            @*@await Component.InvokeAsync("HtmlBlock", new { theme = "vision", widget = "Social Buttons" })*@
                            <a class="widget-social-fb" target="_blank" href="https://facebook.com/blogifierdotnet"><i class="fa fa-facebook"></i> <span>Facebook</span></a>
                            <a class="widget-social-tw" target="_blank" href="https://twitter.com/blogifierdotnet"><i class="fa fa-twitter"></i> <span>Twitter</span></a>
                            <a class="widget-social-in" target="_blank" href="https://instagram.com/blogifierdotnet"><i class="fa fa-instagram"></i> <span>Instagram</span></a>
                            <a class="widget-social-rss" target="_blank" href="/feed/rss"><i class="fa fa-rss"></i> <span>Subscribe</span></a>
                        </div>
                    </div>




                    <a href="~/" class="blog-logo"><img src="~/themes/vision/img/logo.png" width="200" alt="@Model.Blog.Title" /></a>
                    <p class="my-4">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy.</p>
                    <p class="blog-copyright">Copyright © @DateTime.Now.Year. Powered by <a href="https://github.com/blogifierdotnet/Blogifier" data-toggle="tooltip" target="_blank" title="Version - @AppSettings.Version">Blogifier</a>. Designed by <a href="https://francis.bio/" target="_blank" rel="nofollow">Francis</a>.</p>




                </aside>
            </div>
        </div>
    </div>


    <partial name="~/Views/Themes/vision/_Shared/_Footer.cshtml" />

    <div class="blog-admin">
        @if (User.Identity.IsAuthenticated)
            {
        <a href="~/admin"><i class="fa fa-user"></i></a>
            }
            else
            {
        <a href="~/account/login?ReturnUrl=@returnUrl"><i class="fa fa-login"></i></a>
            }
    </div>
</body>
</html>
